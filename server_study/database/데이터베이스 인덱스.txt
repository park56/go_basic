인덱스(index) : 데이터베이스 테이블에 대한 검색 성능의 속도를 높여주는 자료구조
특정 컬럼에 인덱스를 생성하면 해당 컬럼의 데이터들을 정렬해 별도의 메모리 공간에 데이터의 물리적 주소와 함께 저장됨.
인덱스 생성시 오름차순으로 정렬한다. 기능은 자료구조로 구현된다

대표적 자료구조 : 해시테이블, B+Tree

해시 테이블 - 컬럼의 값과 물리적 주소를 {key, value}의 형태로 저장하는 자료 구조
인덱스에서 잘 사용하지 않음 -> 해시 테이블은 '='연산에 최적화 되어 있기 때문, 데이터베이스에서는
'>,<'연산이 많이 사용되는데 해시테이블은 정렬되어 있지 않으므로 특정 기준보다 크거나 작은 값을
빠른 시간안에 찾기가 힘듬

B+Tree - 가장 보편적인 인덱스, Root Node / Branch Node / Leaf Node로 구성되며 계층적 구조
Node는 데이터가 존재하는 공간, Root Node와 Branch Node는 데이터를 위한 Index(Key)만 가지고 
Leaf Node만 Key,Value 모두 가진다. Leaf Node에만 데이터를 저장하고 Leaf Node끼리 LinkedList로 연결되어 있어
선형 시간이 소모되 시간 효율이 올라간다.
Root Node에서 경로를 확인 후 그에 맞는 Node들로 이동해 최종적으로 원하는 데이터가 있는
Leaf Node에 도달한다.

장점 : Where절, Order by절, Min, Max절들의 효울성 -> 데이터가 정렬되어 있어 테이블에서 검색과 정렬 속도를 향상시킨다
단점 : 정렬된 상태를 계속 유지시켜야 한다 -> 명령어들을 수행할 때 마다 부하를 발생시킨다. 인덱스 스캔(<,>를 이용한 스캔)이 무조건 빠른것은 아니다.
인덱스를 관리하기 위해선 DB의 약 10%정도의 저장공간이 추가로 필요하다. -> sql문을 효율적으로 짜는것을 우선하고 인덱스 생성은 마지막 수단으로 사용해야 한다.