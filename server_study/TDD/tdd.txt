TDD : Test Driven Development (테스트 주도 계발)

기존의 개발 : 설계 -> 코딩 -> 테스트
tdd : 테스트 -> 코딩 -> 계선

테스트(테스트는 최대한 촘촘하게 -> 경계값에 가깝게) -> 실패(실패요인 분석) -> 일단 돌아가도록 실패요인 해결 -> 성공 강화(최적화 등)

tdd의 이유 :
man-month(소공의 바이블같은 책) - there is no silver bullet(거기에 은총알(완벽한 해결)없다) -> 소공의 모든 해결책은 장단점(trade off)가 존재한다.

장점 - 
1. Test Case가 많아진다
2. 테스트 케이스를 꼼꼼하게 했을 때 - 유지보수가 쉬워진다 --- 산탄총(스파게티)코드를 방지할 수 있다. 테스트 케이스의 구조가 확실하게 잡혀있기 때문에 다른곳에서 일어나는 오류를 쉽게 알 수 있다
3. 코딩이 재밌어진다. 실패를 겪고 성공으로 나아가는 작업이기 때문에 성취감이 생기게 된다.

TDD는 설계를 완벽하게 할 필요가 없다. 테스트를 끊임없이 하기 때문에 문제가 생기면 눈앞의 문제부터 해결하며 넘어가게 된다
때문에 기존의 설계가 중요해 구현을 설계에 맞추던 것과는 달리 구현에 집중해 문제를 즉각적으로 해결하며 넘어가게 되기 때문에 설계로 골치아플 일이 없어지게 된다.

단점 -
1. 유저 스토리 테스트 케이스를 하기 어렵다 --- tdd는 기본적으로 unit-test(기능하나를 테스트하는것)이기 때문에 각 모듈간의 상호작용을 테스트 하는것이 아니다.
테스트 성격 - 블랙 박스, 화이트 박스 -- tdd와 unit test는 화이트박스에 해당
블랙 박스 - 전체 프로그램을 보고 테스트를 하는 것 --- snoke, macro 
화이트 박스 - 코드안에서 테스트를 하는것 --- tdd, unit test
--> 때문에 블랙박스 테스트도 필요하다
2. 유지가 힘들다 - 팀원과의 합의 필요
3. Thread test가 어렵다. 여러 통신 작업이 필요할 때에는 명확하게 하나의 작업만 정해 테스트해야 한다. 임시 계층(코드)을 만들어 테스트 해야 한다. -> 실무에서 귀찮아서 실시하기 힘들다
