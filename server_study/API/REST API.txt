REST : Representational State Transfer의 줄임말, 해석하면 웹을 위한 네트워크 기반 아키텍처

아키텍처 스타일 :  아키텍처가 지켜야 하는 제약조건들의 집합

네트워크 기반 애플리케이션 아키텍처의 관심사항 : 성능, 규모확장성, 단순성, 수정용이성, 가시성, 이식성, 신뢰성 

네트워크 기반 아키텍처 스타일 : Pipe and Filter, Layered-Client-Cache-Stateless-Server, Code on Demand 등등

웹을 위한 아키텍처 스타일 REST : rest는 네트워크 기반 아키텍처 스타일들 몇 가지와 추가로 Uniform Interface 스타일을 함께 결합한 하이브리드 스타일
client - server 스타일 - 사용자 인터페이스에 대한 관심을 데이터 저장과 분리시켜 클라의 이식성과 서버의 규모 확장성을 개선
Stateless - 클라와 서버의 통신에는 상태가 없어야 한다. 모든 요청은 필요한 모든 정보를 담고 있어야 한다. 그러므로 가시성, 신회성이 개선되고 상태를 저장할 필요가 없어 규모 확장성이 개선된다.
Uniform Interface - 클라,서버등 사이의 인터페이스는 균일 해야한다. 인터페이스를 일반화해 전체 아키텍처가 단순화되고 상호작용 가시성이 개선되고 구현과 서비스가 분리되 독립적 진화가 가능해진다. 제약조건은 4가지로 identification of resources, manipulation of resources through representation, self-descriptive messages, hypermedia as the engine of application state
Layered System - 계층으로 구성이 가능해야 하고, 각 레이러에 속한 구성요소는 인접하지 않은 레이어의 구성요소를 볼 수 없어야 한다.
Code on Demand(Optional) - Code On Demand가 가능해야 한다. 서버가 네트워크를 통해 클라에 프로그램을 전달하면 그 프로그램이 클라에서 실행될 수 있어야 한다. 이 제약조건은 필수가 아니다. 

REST 아키텍처 스타일은 URL, HTTP등의 웹 표준에 반영되었다.