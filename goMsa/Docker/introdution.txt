Docker --
    애플리케이션을 작성, 적재, 실행하는 프로세스를 단순화 하고자 하는 요구사항에서 시작되었다. 
    VServer 프로젝트(쟈크 제리나스) -> LXC(IBM) & rkt(CoreOS) -> Docker
    https://rhelblog.redhat.com/2015/08/28/the-history-of-containers 참조(docker 역사)
    docker 엔진 및 다른 애플리케이션에 들어가능 모든 코드는 go로 작성된다.

    컨테이너 이미지 - 
        코드, 런타임, 시스템 도구, 시스템 라이브러리, 설정 등 소프트웨어를 실행하는데 필요한 모든것을 포함하는 경량의 독립된 실행 가능한 패키지이다.
        컨테이너의 변경할 수 없는 스냅샷(특정 시점의 고정된 상태)을 말한다. run 명령어 등을 사용하면 이미지가 컨테이너가 되어 타입이나 인스턴스와 같은 것으로 간주된다. 여기서 타입은 동작을 구성하는 필드와 메서드를 정의한 것을 말한다.

    컨테이너 -
        개발 환경과 배포 준비 환경의 차이와 같은 주변 환경과 소프트웨어를 분리시켜, 동일한 인프라에서 다른 소프트웨어를 실행하는 팀 간의 충돌을 줄여준다.
        복잡한 설정 없이 개발 시스템에서 운영 코드를 실행할 수 있는 기능을 제공한다. 동일 DB의 다른 인스턴스를 시험용 새 소프트웨어에 설치하지 않고도 클린룸(변경사항이 외부에 영향을 미치지 않음)환경을 만들 수 있다.
        상호 간에 프로세스와 파일 시스템을 분리해 동작한다. 명시적으로 지정하지 않으면 컨테이너는 서로의 파일시스템에 접근할 수 없다. 또 TCP, UDP소켓을 통해 서로 통신할 수 없다.

    Docker 엔진 - 
        orchestration(오케스트레이션, 컨테이너 그룹 내 컴포넌트의 관리 및 조정), 네트워크 스케쥴링 및 보안 기능을 갖춘 경량의 애플리케이션 런타임.
        실제 * 가상 호스트의 어느곳 에서나 설치할 수 있으며 윈도우, 리눅스 모두 지원한다. 컨테이너를 사용하면 개발자는 대용량 또는 소량의 코드와 관련 의존성들을 독립된 패키지로 묶을 수 있다.
