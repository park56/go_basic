웹 브라우저에서는 샌드박스 메커니즘(한 도메인의 리소스가 다른 도메인의 리소스에 접근하지 못하도록 제한하는것)을 구현한다. 
만약 브라우저에서 "동일 출처 정책"을 구현하지 않는다면. 사용자 세션에서 로그아웃을 하지 않았을때 다른 악성 페이지에서 사용자 동의 없이 API요청을 보내는 등의 작동을 할 수 있다.
이러한 보안 문제를 해결하기 위해 JSONP(패딩된 JSON)와 CORS(서로 다른 도메인 사이의 리소스 공유)가 등장했다.

JSONP --
    web app에서 Ajax요청을 보낼 때 Same-origin policy로 요청이 무시당하는 것을 우회하기 위해 만들어짐. 해킹과 비슷한 느낌.
    서버에서 생성한 JSON 데이터를 JS함수의 인자로 전달, web app에서 script 태그를 이용해 로드한다. -> 리턴되는 데이터 타입(Content-Type)헤더는 javascript가 된다.  ## 클라에서 보내는 콜백함수의 이름으로 서버에서는 응답을 캡슐화해 리턴한다.

CORS --
    약 7~8년전부터 출시된 웹, 앱등 모두 CORS로 충분하다.
    W3C에서 제안한 다른 도메인 간의 요청을 표준화한 것. HTTP 클라이언트가 실제 요청 전에 URI애 OPTIONS요청하는 브라우저에서 작동한다.
    한 서버가 스크립트가 로드되는 다른 도메인의 출처를 포함한 헤더를 리턴하면 브라우저가 서버를 신뢰하고 두 사이트간 요청을 허용한다.
    ex)
        if r.Method == "OPTIONS" {                              // CORS에 대한 요청인지 확인
            w.Header().ADD("Access-Control-Allow-Origin","*")   // 허용할 도메인을 설정
            w.Header().ADD("Access-Control-Allow-Method","GET") // 허용할 요청의 HTTP verb를 설정, 이 URI에 대해서는 GET요청만 보낼 수 있음, 꼭 사용할 필요는 없다
            w.WriteHeader(http.StatusNoContent)                 // OPTIONS 요청에 대해서는 본문을 리턴하지 않으므로 204(내용없음)을 사용해 200(ok)를 보내지 않는다
        }