URI == URL

규칙 --
    '/'는 계츨적 관계를 나타낸다.
    URI의 마지막에 '/'가 포함돼서는 안된다.
    가독성을 위해 '-'을 사용해야한다
    '_'는 사용하면 안된다.
    경로 부분은 대소문자를 구분하므로 소문자를 사용하는 것이 좋다.

URI query design - 
    query는 페이지 처리, 필터링, 정렬의 작업을 수행한다. 쿼리로 데이터를 전달하는 경우도 많지만 그런식으로만 할 경우 URI의 최대길이인 2083자를 넘을 수도 있다. 그리고 POST 요청이 일반적으로 본문을 포함하기에 query는 가급적 데이터 전달을 하지 않는다.

경로는 문서, 컬렉션, 저장소, 컨트롤러로 구분된다.

컬렉션 -
    일반적으로 개별 문서에 접근하기 위한 매개변수로 구분되는 여러 리소스가 들어있는 하나의 디렉토리, 컬렉션의 이름은 복수 명사를 사용해야 한다.
    ex) GET /cats

문서 - 
    하나의 객체를 가리키는 리소스. 하나의 문서는 하위 문서 또는 하위 리소스(컬렉션 같은)를 가질 수 있다.
    ex) GET /cats/1
        GET /cats/1/kittens

컨트롤러 - 
    컨트롤러 리소스는 프로시저와 비슷하지만 리소스를 표준 CRUD와 매핑할 수 없을 때 사용된다. 이름은 하위 리소스가 없는 URI의 경로중 마지막 부분(segment)이다. 컨트롤러의 매개변수가 필요한 경우, 쿼리 문자열에 이 매개 변수가 포함된다.
    컨트롤러의 이름은 항상 동사를 사용한다.
    ex) POST /cats/1/feed
        POST /cats/1/feed?food=fish

저장소 - 
    클라이언트가 관리하는 리소스 저장소. 클라이언트가 리소스를 추가, 검색 및 삭제할 수 있게 한다. 저장소는 URI를 추가로 생성하지 않는다.
    ex) PUT /cats/2     # 이렇게 하면 ID가 2인 새 고양이가 추가된다. 컬렉션에 ID를 생략한 채 요청을 보내면 새로 정의된 문서에 대한 참조가 응답에 포함돼 나중에 상호작용 할 수 있다. 이름은 복수 명사를 사용해야 한다.
    

